# azure-pipelines.yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: '<your-docker-registry-service-connection>'
  aksServiceConnection: '<your-aks-service-connection>'
  imageNamePrefix: 'your-docker-image-prefix'  # E.g., 'yourdockerhubusername/todo'
  sonarQubeServiceConnection: '<your-sonarqube-service-connection>'
  sonarProjectKey: '<your-sonarqube-project-key>'

stages:
- stage: Build
  displayName: Build Docker Images
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Checkout@2
      displayName: Checkout code

    - task: SonarQubePrepare@4
      inputs:
        SonarQube: '$(sonarQubeServiceConnection)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarProjectKey)'
        cliSources: '.'

    - task: SonarQubeAnalyze@4

    - task: SonarQubePublish@4
      inputs:
        pollingTimeoutSec: '300'

    - task: Docker@2
      displayName: Build and Push get-tasks Docker image
      inputs:
        command: buildAndPush
        dockerfile: 'get-tasks/Dockerfile'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        imageName: '$(imageNamePrefix)-get-tasks'
        tags: |
          $(Build.BuildId)

    - task: Docker@2
      displayName: Build and Push add-task Docker image
      inputs:
        command: buildAndPush
        dockerfile: 'add-task/Dockerfile'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        imageName: '$(imageNamePrefix)-add-task'
        tags: |
          $(Build.BuildId)

    - task: Docker@2
      displayName: Build and Push delete-task Docker image
      inputs:
        command: buildAndPush
        dockerfile: 'delete-task/Dockerfile'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        imageName: '$(imageNamePrefix)-delete-task'
        tags: |
          $(Build.BuildId)

    - task: Docker@2
      displayName: Build and Push frontend-ui Docker image
      inputs:
        command: buildAndPush
        dockerfile: 'frontend-ui/Dockerfile'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        imageName: '$(imageNamePrefix)-frontend-ui'
        tags: |
          $(Build.BuildId)

- stage: Deploy
  displayName: Deploy to AKS
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
    - task: Kubernetes@1
      displayName: Create secret for ACR authentication
      inputs:
        kubernetesServiceConnection: '$(aksServiceConnection)'
        namespace: 'default'
        command: 'createSecret'
        secretName: 'acr-auth'
        dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

    - task: Kubernetes@1
      displayName: Deploy microservices
      inputs:
        kubernetesServiceConnection: '$(aksServiceConnection)'
        namespace: 'default'
        command: 'apply'
        useConfigurationFile: true
        configurationType: 'multi'
        configuration: |
          $(Pipeline.Workspace)/manifests/*/*.yaml
        secretName: 'acr-auth'